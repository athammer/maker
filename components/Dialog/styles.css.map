{"version":3,"file":"styles.css","mappings":"AAyDA,+BAGA,mCADA,2BADA,aAGA,CAEA,oCACA,+BAGA,8BADA,iBADA,WAGA,CACA,CC7DA,+BACA,YACA,CCuIA,+BACA,kBACA,SACA,CAEA,+BAOA,qBAHA,SAEA,aAEA,uBAHA,OAJA,eAEA,QADA,KAOA,CAEA,+BAKA,0BAFA,6BACA,cAHA,kBACA,UAIA,CAEA,oCACA,+BACA,kBACA,CAEA,+BAMA,kBACA,kCANA,qBAEA,YACA,6BACA,gBAHA,UAMA,CACA,CAEA,+BAMA,gDAFA,SACA,OAJA,eAEA,QADA,KAKA,CAMA,+BAEA,gBADA,cAEA,CAEA,yBACA,+BACA,eACA,CACA","sources":["webpack://@square/maker/./src/components/Dialog/src/Dialog.vue","webpack://@square/maker/./src/components/Dialog/src/DialogContent.vue","webpack://@square/maker/./src/components/Dialog/src/DialogLayer.vue"],"sourcesContent":["<template>\n\t<div\n\t\t:class=\"$s.Dialog\"\n\t\t:style=\"style\"\n\t>\n\t\t<!-- @slot Dialog content -->\n\t\t<slot />\n\t</div>\n</template>\n\n<script>\nimport chroma from 'chroma-js';\nimport { MThemeKey, defaultTheme, resolveThemeableProps } from '@square/maker/components/Theme';\n\nexport default {\n\tname: 'Dialog',\n\n\tinject: {\n\t\ttheme: {\n\t\t\tdefault: defaultTheme(),\n\t\t\tfrom: MThemeKey,\n\t\t},\n\t},\n\n\tprops: {\n\t\t/**\n\t\t * Background color of container\n\t\t */\n\t\tbgColor: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t\tvalidator: (color) => chroma.valid(color),\n\t\t},\n\t\t/**\n\t\t * Text color of container\n\t\t */\n\t\tcolor: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t\tvalidator: (color) => chroma.valid(color),\n\t\t},\n\t},\n\n\tcomputed: {\n\t\t...resolveThemeableProps('dialog', ['bgColor', 'color']),\n\n\t\tstyle() {\n\t\t\treturn {\n\t\t\t\t'--bg-color': this.resolvedBgColor,\n\t\t\t\t'--color': this.resolvedColor,\n\t\t\t};\n\t\t},\n\t},\n};\n</script>\n\n<style module=\"$s\">\n.Dialog {\n\toverflow: auto;\n\tcolor: var(--color, inherit);\n\tbackground: var(--bg-color, #f5f6f7);\n}\n\n@media screen and (--for-tablet-landscape-up) {\n\t.Dialog {\n\t\twidth: 400px;\n\t\tmin-height: 180px;\n\t\tmax-height: calc(100vh - 64px);\n\t}\n}\n</style>\n","<template>\n\t<div :class=\"$s.DialogContent\">\n\t\t<!-- @slot Dialog Content content (gets correct padding) -->\n\t\t<slot />\n\t</div>\n</template>\n\n<style module=\"$s\">\n.DialogContent {\n\tpadding: 24px;\n}\n</style>\n","<template>\n\t<div :class=\"$s.Layer\">\n\t\t<m-transition-fade-in>\n\t\t\t<div\n\t\t\t\tv-if=\"dialogApi.state.vnode\"\n\t\t\t\t:class=\"$s.Translucent\"\n\t\t\t/>\n\t\t</m-transition-fade-in>\n\t\t<m-transition-responsive :transitions=\"transitions\">\n\t\t\t<div\n\t\t\t\tv-if=\"dialogApi.state.vnode\"\n\t\t\t\t:class=\"$s.DialogLayer\"\n\t\t\t\t@click.capture=\"closeOnClickOutside\"\n\t\t\t>\n\t\t\t\t<pseudo-window\n\t\t\t\t\tbody\n\t\t\t\t\t:class=\"$s.disableScroll\"\n\t\t\t\t/>\n\t\t\t\t<div\n\t\t\t\t\tref=\"dialog\"\n\t\t\t\t\t:class=\"$s.DialogContentWrapper\"\n\t\t\t\t>\n\t\t\t\t\t<v :nodes=\"dialogApi.state.vnode\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</m-transition-responsive>\n\t</div>\n</template>\n\n<script>\nimport Vue from 'vue';\nimport V from 'vue-v';\nimport PseudoWindow from 'vue-pseudo-window';\nimport { MTransitionFadeIn } from '@square/maker/components/TransitionFadeIn';\nimport { MTransitionResponsive } from '@square/maker/utils/TransitionResponsive';\nimport {\n\tspringUpFn,\n\tspringDownFn,\n\tfloatUpFn,\n\tfloatDownFn,\n\tmobileMinWidth,\n\ttabletMinWidth,\n} from '@square/maker/utils/transitions';\nimport dialogApi from './dialog-api';\n\nconst apiMixin = {\n\tprovide() {\n\t\tconst vm = this;\n\t\tconst api = {\n\t\t\tstate: Vue.observable({\n\t\t\t\tvnode: undefined,\n\t\t\t\toptions: {},\n\t\t\t}),\n\n\t\t\topen(renderFn, options = {}) {\n\t\t\t\tconst vnode = renderFn(vm.$createElement);\n\t\t\t\tthis.state.vnode = vnode;\n\t\t\t\tthis.state.options = {\n\t\t\t\t\tcloseOnClickOutside: false,\n\t\t\t\t\tbeforeCloseHook: async () => true,\n\t\t\t\t\t...options,\n\t\t\t\t};\n\n\t\t\t\t// function that only closes this specific Dialog\n\t\t\t\treturn () => {\n\t\t\t\t\tif (this.state.vnode === vnode) {\n\t\t\t\t\t\tthis.close();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tasync close() {\n\t\t\t\t// Close the open popover (if present) and then close the dialog in the next tick.\n\t\t\t\t// Closing at the same time will result in the popover content becoming inline and\n\t\t\t\t// causes a weird content shift as the dialog fades away.\n\n\t\t\t\tif (this.state.vnode && typeof this.state.options.beforeCloseHook === 'function') {\n\t\t\t\t\tif (!(await this.state.options.beforeCloseHook())) {\n\t\t\t\t\t\treturn; // cancel\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvm.popoverApi?.closePopover();\n\t\t\t\tvm.$nextTick(() => {\n\t\t\t\t\tthis.state.vnode = undefined;\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\n\t\tif (!this.dialogApi) {\n\t\t\tthis.dialogApi = api;\n\t\t}\n\n\t\treturn {\n\t\t\t[dialogApi]: api,\n\t\t};\n\t},\n};\n\nexport default {\n\tname: 'DialogLayer',\n\n\tcomponents: {\n\t\tV,\n\t\tPseudoWindow,\n\t\tMTransitionFadeIn,\n\t\tMTransitionResponsive,\n\t},\n\n\tinject: {\n\t\tdialogApi,\n\t},\n\n\tinheritAttrs: false,\n\n\tapiMixin,\n\n\tdata() {\n\t\treturn {\n\t\t\ttransitions: [{\n\t\t\t\tminWidth: mobileMinWidth,\n\t\t\t\tenter: springUpFn,\n\t\t\t\tleave: springDownFn,\n\t\t\t}, {\n\t\t\t\tminWidth: tabletMinWidth,\n\t\t\t\tenter: floatUpFn,\n\t\t\t\tleave: floatDownFn,\n\t\t\t}],\n\t\t};\n\t},\n\n\tmethods: {\n\t\tcloseOnClickOutside(event) {\n\t\t\tconst { closeOnClickOutside } = this.dialogApi.state.options;\n\t\t\tconst { dialog } = this.$refs;\n\n\t\t\tif (dialog && closeOnClickOutside && !dialog.contains(event.target)) {\n\t\t\t\tthis.dialogApi.close();\n\t\t\t}\n\t\t},\n\t},\n};\n</script>\n\n<style module=\"$s\">\n.Layer {\n\tposition: relative;\n\tz-index: 1;\n}\n\n.DialogLayer {\n\tposition: fixed;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\tdisplay: flex;\n\talign-items: flex-end;\n\tjustify-content: center;\n}\n\n.DialogContentWrapper {\n\tposition: relative;\n\twidth: 100%;\n\tmax-height: calc(100% - 48px);\n\toverflow: auto;\n\tborder-radius: 8px 8px 0 0;\n}\n\n@media screen and (--for-tablet-landscape-up) {\n\t.DialogLayer {\n\t\talign-items: center;\n\t}\n\n\t.DialogContentWrapper {\n\t\tdisplay: inline-block;\n\t\twidth: auto;\n\t\theight: auto;\n\t\tmax-height: calc(100% - 64px);\n\t\toverflow: hidden;\n\t\tborder-radius: 8px;\n\t\tbox-shadow: 0 0 24px 8px rgba(0, 0, 0, 0.3);\n\t}\n}\n\n.Translucent {\n\tposition: fixed;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\tbackground-color: var(--color-overlay, rgba(0, 0, 0, 0.3));\n}\n\n/**\n * Position fixed prevents unnecessary body scrolling and jumpiness on Dialogs\n * when using the PinInput component inside of them on iOS devices\n */\n.disableScroll {\n\tposition: fixed;\n\toverflow: hidden;\n}\n\n@media (--for-tablet-landscape-up) {\n\t.disableScroll {\n\t\tposition: initial;\n\t}\n}\n</style>\n"],"names":[],"sourceRoot":""}