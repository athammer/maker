{"version":3,"file":"styles.css","mappings":"AAkNA,+BAGA,aACA,mBAHA,aACA,iBAIA,wDADA,mDAMA,CAHA,6DACA,kBACA,CAGA,+BAGA,mBAYA,8CACA,yDACA,2DAZA,sBAcA,yBATA,8CAUA,eAnBA,aACA,cAWA,oBADA,eADA,oBAHA,YAJA,uBAGA,YAWA,aATA,UAKA,kBARA,UAiCA,CAjBA,6DACA,gDACA,CAEA,6DACA,oBACA,CAEA,6DACA,UACA,CAEA,+GAGA,mDACA,CAGA,+BACA,kDACA,CAEA,yCACA,OAEA,2BACA,CAEA,QAEA,0BACA,CAEA,IACA,0BACA,CAEA,IACA,yBACA,CAEA,MAEA,uBACA,CACA","sources":["webpack://@square/maker/./src/components/PinInput/src/PinInputControl.vue"],"sourcesContent":["<template>\n\t<div\n\t\t:class=\"{\n\t\t\t[$s.PinInputContainer]: true,\n\t\t\t[$s.shake]: isShaking,\n\t\t\t[$s.disabled]: disabled,\n\t\t\t[$s.error]: Boolean($slots.error),\n\t\t}\"\n\t>\n\t\t<input\n\t\t\tv-for=\"(val, i) in pin\"\n\t\t\t:key=\"i\"\n\t\t\t:ref=\"getPinCellRef(i)\"\n\t\t\t:value=\"val\"\n\t\t\t:autocomplete=\"i === 0 ? 'one-time-code' : 'off'\"\n\t\t\t:disabled=\"disabled\"\n\t\t\t:maxlength=\"i === 0 ? pinLength : 1\"\n\t\t\t:class=\"{\n\t\t\t\t[$s.PinInputCell]: true,\n\t\t\t\t[$s.filled]: variant === 'fill',\n\t\t\t\t[$s.error]: invalid,\n\t\t\t}\"\n\t\t\ttype=\"text\"\n\t\t\tinputmode=\"numeric\"\n\t\t\tpattern=\"[0-9]*\"\n\t\t\trequired\n\t\t\t@input=\"onInputPin($event, i)\"\n\t\t\t@paste=\"onPastePin($event, i)\"\n\t\t\t@focus=\"onFocusPin($event, i)\"\n\t\t\t@keydown.delete=\"onDelete($event, i)\"\n\t\t>\n\t</div>\n</template>\n\n<script>\nimport { BASE_TEN } from '@square/maker/utils/constants';\n\nconst DEFAULT_INPUT_SIZE = 6;\n\nexport default {\n\tprops: {\n\t\t/**\n\t\t * Lenth of pin\n\t\t */\n\t\tpinLength: {\n\t\t\ttype: Number,\n\t\t\tdefault: DEFAULT_INPUT_SIZE,\n\t\t\tvalidator: (value) => value > 0,\n\t\t},\n\n\t\t/**\n\t\t * Input variant\n\t\t */\n\t\tvariant: {\n\t\t\ttype: String,\n\t\t\tdefault: 'fill',\n\t\t\tvalidator: (variant) => ['fill', 'outline'].includes(variant),\n\t\t},\n\n\t\t/**\n\t\t * Toggles input invalid state\n\t\t */\n\t\tinvalid: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\n\t\t/**\n\t\t * Disable the inputs\n\t\t */\n\t\tdisabled: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tpin: new Array(this.pinLength).fill(''),\n\t\t\tisShaking: false,\n\t\t};\n\t},\n\n\tcomputed: {\n\t\tcurrentPin() {\n\t\t\treturn this.pin.join('');\n\t\t},\n\t},\n\n\twatch: {\n\t\t// Refocus on first input when re-enabled\n\t\tdisabled(isDisabled) {\n\t\t\tif (!isDisabled) {\n\t\t\t\tthis.focusOnPinCell(0);\n\t\t\t}\n\t\t},\n\t},\n\n\tmounted() {\n\t\tthis.focusOnPinCell(0);\n\t},\n\n\tmethods: {\n\t\tfindFirstIncompletePinCellIndex() {\n\t\t\treturn this.pin.findIndex((value) => value === '');\n\t\t},\n\n\t\tgetPinCellRef(index) {\n\t\t\treturn `pin-cell-${index}`;\n\t\t},\n\n\t\t// Focus on verification code cell input at given index.\n\t\tfocusOnPinCell(index) {\n\t\t\tconst cellReference = this.$refs[this.getPinCellRef(index)];\n\t\t\tif (cellReference?.[0]?.focus) {\n\t\t\t\tcellReference[0].focus();\n\t\t\t}\n\t\t},\n\n\t\tonInputPin(event, index) {\n\t\t\tconst input = event?.target?.value;\n\t\t\tif (!input) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Only allow integers in input\n\t\t\tconst inputValue = Number.isInteger(Number.parseInt(input, BASE_TEN)) ? input : '';\n\n\t\t\t// One-time-code autofill is treated as an input, not a paste\n\t\t\tif (this.attemptSplitPinIntoInputs(inputValue, index)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$set(this.pin, index, inputValue);\n\n\t\t\tconst firstIncompleteCellIndex = this.findFirstIncompletePinCellIndex();\n\n\t\t\t// eslint-disable-next-line no-magic-numbers\n\t\t\tif (firstIncompleteCellIndex === -1) {\n\t\t\t\tthis.handleComplete(this.currentPin);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This allows us to auto jump to the next code cell input as the user types.\n\t\t\tthis.focusOnPinCell(firstIncompleteCellIndex);\n\t\t},\n\n\t\tattemptSplitPinIntoInputs(value, inputIndex) {\n\t\t\tif (inputIndex === 0\n\t\t\t\t&& value?.length === this.pinLength\n\t\t\t\t&& Number.isInteger(Number.parseInt(value, BASE_TEN))\n\t\t\t) {\n\t\t\t\tthis.$set(this, 'pin', value.split(''));\n\n\t\t\t\t// Having a timeout here gives the user a chance to see their code before success/failure\n\t\t\t\tconst TIMEOUT_LENGTH_MS = 500;\n\t\t\t\tsetTimeout(() => { this.handleComplete(this.currentPin); }, TIMEOUT_LENGTH_MS);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\t\thandleComplete(pin) {\n\t\t\tthis.$emit('complete', pin);\n\t\t},\n\n\t\tonPastePin(event, index) {\n\t\t\tevent.preventDefault();\n\t\t\tconst pastedValue = (event.clipboardData || window.clipboardData).getData('text');\n\t\t\tthis.attemptSplitPinIntoInputs(pastedValue, index);\n\t\t},\n\n\t\tonDelete(event, index) {\n\t\t\t// Reset current index, and then focus on previous cell\n\t\t\tthis.$set(this.pin, index, '');\n\n\t\t\t// eslint-disable-next-line no-magic-numbers\n\t\t\tconst newIndex = index - 1;\n\t\t\tif (newIndex >= 0) {\n\t\t\t\tthis.focusOnPinCell(newIndex);\n\t\t\t}\n\t\t},\n\n\t\tonFocusPin(event, index) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.$set(this.pin, index, '');\n\t\t},\n\n\t\tresetPin() {\n\t\t\tconst newArray = (new Array(this.pinLength)).fill('');\n\t\t\tthis.$set(this, 'pin', newArray);\n\t\t},\n\n\t\t/**\n\t\t * shakes and clears pininput\n\t\t * @public\n\t\t */\n\t\tshakeAndClearInputs() {\n\t\t\tthis.resetPin();\n\t\t\tthis.focusOnPinCell(0);\n\t\t\tthis.isShaking = true;\n\t\t\tconst TIMEOUT_LENGTH_MS = 1000;\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.isShaking = false;\n\t\t\t}, TIMEOUT_LENGTH_MS);\n\t\t},\n\t},\n};\n</script>\n\n<style module=\"$s\">\n.PinInputContainer {\n\tdisplay: flex;\n\tflex-wrap: nowrap;\n\tgap: 8px;\n\talign-items: center;\n\tfont-weight: var(--maker-font-label-font-weight, 500);\n\tfont-family: var(--maker-font-label-font-family, inherit);\n\n\t&.error {\n\t\tpadding-bottom: 8px;\n\t}\n}\n\n.PinInputCell {\n\tdisplay: flex;\n\tflex: 0 1 auto;\n\talign-items: center;\n\tjustify-content: center;\n\tbox-sizing: border-box;\n\twidth: 50px;\n\tmin-width: 0;\n\theight: 50px;\n\tpadding: 0;\n\tcolor: var(--maker-color-neutral-90, rgba(107, 107, 107, 0.9));\n\tfont-weight: inherit;\n\tfont-size: 16px;\n\tfont-family: inherit;\n\ttext-align: center;\n\tbackground: var(--maker-color-background, #fff);\n\tborder: 1px solid var(--maker-color-neutral-20, rgba(0, 0, 0, 0.3));\n\tborder-radius: var(--maker-shape-default-border-radius, 8px);\n\toutline: none;\n\tcaret-color: currentColor;\n\tcursor: pointer;\n\n\t&.filled {\n\t\tbackground: var(--maker-color-neutral-10, #f6f7f9);\n\t}\n\n\t&.error {\n\t\tborder-color: rgba(206, 50, 23, 1);\n\t}\n\n\t&.disabled {\n\t\topacity: 0.6;\n\t}\n\n\t&:focus,\n\t&:valid,\n\t&:hover {\n\t\tborder: 2px solid var(--maker-color-neutral-80, #222);\n\t}\n}\n\n.shake {\n\tanimation: invalidpinshake 500ms linear;\n}\n\n@keyframes invalidpinshake {\n\t8%,\n\t41% {\n\t\ttransform: translateX(-16px);\n\t}\n\n\t25%,\n\t58% {\n\t\ttransform: translateX(16px);\n\t}\n\n\t75% {\n\t\ttransform: translateX(-8px);\n\t}\n\n\t92% {\n\t\ttransform: translateX(8px);\n\t}\n\n\t0%,\n\t100% {\n\t\ttransform: translateX(0);\n\t}\n}\n</style>\n"],"names":[],"sourceRoot":""}