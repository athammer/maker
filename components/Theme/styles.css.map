{"version":3,"file":"styles.css","mappings":"AAsLA,+BAIA,+CAHA,8BAEA,+CADA,8CAGA","sources":["webpack://@square/maker/./src/components/Theme/src/Theme.vue"],"sourcesContent":["<template>\n\t<div\n\t\t:class=\"$s.Theme\"\n\t\t:style=\"styles\"\n\t>\n\t\t<slot />\n\t</div>\n</template>\n\n<script>\nimport { merge, mergeWith } from 'lodash';\nimport { BASE_TEN } from '@square/maker/utils/constants';\nimport { showWarning } from '@square/maker/utils/debug';\nimport key from './key';\nimport defaultTheme from './default-theme';\nimport { resolve, getPath } from './utils';\n\n// naive check, just checks for presence of a render field,\n// which is assumed to be a function, which is fine for now\nfunction isVueComponent(value) {\n\treturn value && value.render;\n}\n\n// returns true if value is an array\n// of objects with id fields\n// for the moment this is only for profiles\nfunction isKeyedArray(value) {\n\treturn value?.[0]?.id;\n}\n\nfunction keyedArrayIntoObject(arrayValue) {\n\tconst objectValue = {};\n\tfor (const item of arrayValue) {\n\t\tobjectValue[item.id] = item;\n\t}\n\treturn objectValue;\n}\n\nfunction objectIntoKeyedArray(objectValue) {\n\tconst arrayValue = [];\n\tfor (const [id, item] of Object.entries(objectValue)) {\n\t\titem.id = id;\n\t\tarrayValue.push(item);\n\t}\n\treturn arrayValue;\n}\n\nfunction mergeKeyedArrays(value, mergeValue) {\n\tconst valueObject = keyedArrayIntoObject(value);\n\tconst mergeValueObject = keyedArrayIntoObject(mergeValue);\n\tconst mergedObject = merge(valueObject, mergeValueObject);\n\tconst mergedKeyedArray = objectIntoKeyedArray(mergedObject);\n\treturn mergedKeyedArray;\n}\n\n// recursively merge all objects\n// EXCEPT for Vue components\nfunction mergeStrategy(value, mergeValue) {\n\tif (isVueComponent(mergeValue)) {\n\t\treturn mergeValue;\n\t}\n\n\tif (isKeyedArray(value) && isKeyedArray(mergeValue)) {\n\t\treturn mergeKeyedArrays(value, mergeValue);\n\t}\n\n\t// returning undefined means \"merge values recursively\"\n\t// https://lodash.com/docs/4.17.15#mergeWith\n\treturn undefined;\n}\n\nfunction resolveTheme(data, parentTheme, theme, profileId) {\n\tmergeWith(data, parentTheme, theme, mergeStrategy);\n\tif (profileId) {\n\t\tconst foundProfile = data.profiles.find((profile) => profile.id === profileId);\n\t\tif (foundProfile) {\n\t\t\tmergeWith(data, foundProfile, mergeStrategy);\n\t\t} else {\n\t\t\tconst validIds = data.profiles\n\t\t\t\t.map((profile) => profile.id)\n\t\t\t\t.filter((id) => id);\n\t\t\tshowWarning(`profile ${profileId} doesn't exist within theme, only found: ${validIds}`, 'Theme');\n\t\t}\n\t}\n\tdata.resolve = resolve;\n\tdata.getPath = getPath;\n}\n\nfunction clamp(value, min, max) {\n\treturn Math.min(Math.max(Number.parseInt(value, BASE_TEN), min), max);\n}\n\nexport default {\n\tinject: {\n\t\tparentTheme: {\n\t\t\tdefault: defaultTheme(),\n\t\t\tfrom: key,\n\t\t},\n\t},\n\tprovide() {\n\t\treturn {\n\t\t\t// provided data needs to be reactive\n\t\t\t[key]: this.dataTest,\n\t\t};\n\t},\n\tinheritAttrs: false,\n\tprops: {\n\t\ttheme: {\n\t\t\ttype: Object,\n\t\t\tdefault: () => ({}),\n\t\t},\n\t\tprofile: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t},\n\t},\n\tdata() {\n\t\tconst dataTest = {};\n\t\tresolveTheme(dataTest, this.parentTheme, this.theme, this.profile);\n\t\treturn {\n\t\t\tdataTest,\n\t\t};\n\t},\n\tcomputed: {\n\t\tstyles() {\n\t\t\tconst { colors, fonts, shapes } = this;\n\t\t\tconst MAX_THUMBNAIL_RADIUS = 8;\n\n\t\t\treturn {\n\t\t\t\t'--maker-color-neutral-0': colors['neutral-0'],\n\t\t\t\t'--maker-color-neutral-10': colors['neutral-10'],\n\t\t\t\t'--maker-color-neutral-20': colors['neutral-20'],\n\t\t\t\t'--maker-color-neutral-80': colors['neutral-80'],\n\t\t\t\t'--maker-color-neutral-90': colors['neutral-90'],\n\t\t\t\t'--maker-color-neutral-100': colors['neutral-100'],\n\t\t\t\t'--maker-color-primary': colors.primary,\n\t\t\t\t'--maker-color-background': colors.background,\n\t\t\t\t'--maker-color-heading': colors.heading,\n\t\t\t\t'--maker-color-body': colors.body,\n\t\t\t\t'--maker-color-elevation': colors.elevation,\n\t\t\t\t'--maker-color-overlay': colors.overlay,\n\t\t\t\t'--maker-font-heading-font-family': fonts.heading.fontFamily,\n\t\t\t\t'--maker-font-heading-font-weight': fonts.heading.fontWeight,\n\t\t\t\t'--maker-font-body-font-family': fonts.body.fontFamily,\n\t\t\t\t'--maker-font-body-font-weight': fonts.body.fontWeight,\n\t\t\t\t'--maker-font-label-font-family': fonts.label.fontFamily,\n\t\t\t\t'--maker-font-label-font-weight': fonts.label.fontWeight,\n\t\t\t\t'--maker-shape-default-border-radius': shapes.defaultBorderRadius,\n\t\t\t\t'--maker-shape-card-border-radius': shapes.cardBorderRadius,\n\t\t\t\t'--maker-shape-button-border-radius': shapes.buttonBorderRadius,\n\t\t\t\t'--maker-shape-image-border-radius': shapes.imageBorderRadius,\n\t\t\t\t'--maker-shape-thumbnail-border-radius': `${clamp(shapes.imageBorderRadius, 0, MAX_THUMBNAIL_RADIUS)}px`,\n\t\t\t};\n\t\t},\n\t},\n\n\t// watch: {\n\t// \ttheme: {\n\t// \t\tdeep: true,\n\t// \t\thandler() {\n\t// \t\t\tresolveTheme(this.$data, this.parentTheme, this.theme, this.profile);\n\t// \t\t},\n\t// \t},\n\t//\n\t// \tparentTheme: {\n\t// \t\tdeep: true,\n\t// \t\thandler() {\n\t// \t\t\tresolveTheme(this.$data, this.parentTheme, this.theme, this.profile);\n\t// \t\t},\n\t// \t},\n\t//\n\t//\n\t// },\n\n\tbeforeUpdate() {\n\t\t// update theme on prop changes\n\t\tresolveTheme(this.dataTest, this.parentTheme, this.theme, this.profile);\n\t},\n};\n</script>\n\n<style module=\"$s\">\n.Theme {\n\tcolor: var(--maker-color-body);\n\tfont-weight: var(--maker-font-body-font-weight);\n\tfont-family: var(--maker-font-body-font-family);\n\tbackground-color: var(--maker-color-background);\n}\n</style>\n"],"names":[],"sourceRoot":""}