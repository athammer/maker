{"version":3,"file":"styles.css","mappings":"AAwMA,+BAGA,YAFA,kBACA,UAEA,CAEA,+BAKA,uDAHA,YACA,iBACA,uBAHA,UAsBA,CAhBA,6DACA,0DACA,CAEA,6DACA,eACA,CAEA,6DACA,sCACA,CAEA,6DACA,2CACA,2CACA","sources":["webpack://@square/maker/./src/components/Image/src/Image.vue"],"sourcesContent":["<template>\n\t<div\n\t\t:class=\"$s.ImageWrapper\"\n\t>\n\t\t<m-skeleton-block\n\t\t\tv-if=\"!loaded\"\n\t\t\t:class=\"[\n\t\t\t\t$s.Image,\n\t\t\t\t$s[`shape_${resolvedShape}`],\n\t\t\t]\"\n\t\t/>\n\t\t<m-transition-fade-in>\n\t\t\t<img\n\t\t\t\tv-show=\"loaded\"\n\t\t\t\t:class=\"{\n\t\t\t\t\t[$s.Image]: true,\n\t\t\t\t\t[$s[`shape_${resolvedShape}`]]: resolvedShape,\n\t\t\t\t\t[$s.thumbnail]: isThumbnail,\n\t\t\t\t}\"\n\t\t\t\t:style=\"style\"\n\t\t\t\t:src=\"src\"\n\t\t\t\t:srcset=\"srcset\"\n\t\t\t\t:sizes=\"sizes\"\n\t\t\t\tv-bind=\"$attrs\"\n\t\t\t\tv-on=\"$listeners\"\n\t\t\t>\n\t\t</m-transition-fade-in>\n\t\t<pseudo-window\n\t\t\t@resize=\"throttledResizeHandler\"\n\t\t/>\n\t</div>\n</template>\n\n<script>\nimport PseudoWindow from 'vue-pseudo-window';\nimport { throttle } from 'lodash';\nimport { MTransitionFadeIn } from '@square/maker/components/TransitionFadeIn';\nimport { MSkeletonBlock } from '@square/maker/components/Skeleton';\nimport { MThemeKey, defaultTheme, resolveThemeableProps } from '@square/maker/components/Theme';\n\nfunction SharedIntersectionObserver() {\n\tconst callbacks = new WeakMap();\n\tconst o = new IntersectionObserver((entries) => {\n\t\tentries.forEach((entry) => callbacks.get(entry.target)(entry));\n\t});\n\n\treturn {\n\t\twatch(element, callback) {\n\t\t\tcallbacks.set(element, callback);\n\t\t\to.observe(element);\n\t\t},\n\t\tunwatch(element) {\n\t\t\to.unobserve(element);\n\t\t\tcallbacks.delete(element);\n\t\t},\n\t};\n}\n\nconst imgCache = new Set();\nconst THUMBNAIL_MAX_WIDTH = '150';\nlet observer;\n\n/**\n * @inheritAttrs img\n * @inheritListeners img\n */\nexport default {\n\tcomponents: {\n\t\tPseudoWindow,\n\t\tMTransitionFadeIn,\n\t\tMSkeletonBlock,\n\t},\n\n\tinject: {\n\t\ttheme: {\n\t\t\tdefault: defaultTheme(),\n\t\t\tfrom: MThemeKey,\n\t\t},\n\t},\n\n\tinheritAttrs: false,\n\n\tprops: {\n\t\tsrc: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t},\n\t\tsrcset: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t},\n\t\tsizes: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t},\n\t\t/**\n\t\t * Original applies theme's border radius, square applies border radius of 0\n\t\t * @values original, square, circle, arch\n\t\t */\n\t\tshape: {\n\t\t\ttype: String,\n\t\t\tdefault: undefined,\n\t\t\tvalidator: (shape) => ['original', 'square', 'circle', 'arch'].includes(shape),\n\t\t},\n\t\tlazyload: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tdata() {\n\t\tconst throttleDelay = 200;\n\n\t\treturn {\n\t\t\tloaded: imgCache.has(this.src + this.srcset),\n\t\t\tthrottledResizeHandler: throttle(this.getImageDimensions, throttleDelay),\n\t\t\theight: 0,\n\t\t\twidth: 0,\n\t\t};\n\t},\n\n\tcomputed: {\n\t\t...resolveThemeableProps('image', ['shape']),\n\n\t\tstyle() {\n\t\t\treturn {\n\t\t\t\t'--image-height': `${this.height}px`,\n\t\t\t};\n\t\t},\n\n\t\tisThumbnail() {\n\t\t\treturn this.width < THUMBNAIL_MAX_WIDTH;\n\t\t},\n\t},\n\n\twatch: {\n\t\tsrc: 'load',\n\t\tsrcset: 'load',\n\t},\n\n\tmounted() {\n\t\tif (!this.lazyload) {\n\t\t\tthis.load();\n\t\t} else {\n\t\t\tif (!observer) {\n\t\t\t\tobserver = new SharedIntersectionObserver();\n\t\t\t}\n\t\t\tobserver.watch(this.$el, ({ isIntersecting }) => {\n\t\t\t\tif (isIntersecting) {\n\t\t\t\t\tthis.load();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.getImageDimensions();\n\t},\n\n\tbeforeDestroy() {\n\t\tif (observer) {\n\t\t\tobserver.unwatch(this.$el);\n\t\t}\n\t},\n\n\tmethods: {\n\t\tload() {\n\t\t\tif (this.loaded || (!this.src && !this.srcset)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst img = new Image();\n\n\t\t\tif (this.src) {\n\t\t\t\timg.src = this.src;\n\t\t\t}\n\n\t\t\tif (this.srcset) {\n\t\t\t\timg.srcset = this.srcset;\n\t\t\t}\n\n\t\t\t// Needed to not load the full size image\n\t\t\t// and match the size loaded in the UI\n\t\t\tif (this.sizes) {\n\t\t\t\timg.sizes = this.sizes;\n\t\t\t}\n\n\t\t\timg.addEventListener('load', () => {\n\t\t\t\timgCache.add(this.src + this.srcset);\n\t\t\t\tthis.loaded = true;\n\t\t\t\tthis.getImageDimensions();\n\t\t\t});\n\t\t},\n\n\t\tgetImageDimensions() {\n\t\t\tthis.height = this.$el?.offsetHeight || '0';\n\t\t\tthis.width = this.$el?.offsetWidth || '0';\n\t\t},\n\t},\n};\n</script>\n\n<style module=\"$s\">\n.ImageWrapper {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n}\n\n.Image {\n\twidth: 100%;\n\theight: 100%;\n\tobject-fit: cover;\n\tobject-position: center;\n\tborder-radius: var(--maker-shape-image-border-radius, 0);\n\n\t&.thumbnail {\n\t\tborder-radius: var(--maker-shape-thumbnail-border-radius, 0);\n\t}\n\n\t&.shape_square {\n\t\tborder-radius: 0;\n\t}\n\n\t&.shape_circle {\n\t\tborder-radius: var(--image-height, 100%);\n\t}\n\n\t&.shape_arch {\n\t\tborder-top-left-radius: var(--image-height);\n\t\tborder-top-right-radius: var(--image-height);\n\t}\n}\n</style>\n"],"names":[],"sourceRoot":""}